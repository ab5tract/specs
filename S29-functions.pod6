=begin pod
=TITLE
Synopsis 29: Builtin Functions

=AUTHORS
    Rod Adams <rod@rodadams.net>
    Larry Wall <larry@wall.org>
    Aaron Sherman <ajs@ajs.com>
    Mark Stosberg <mark@summersault.com>
    Carl Mäsak <cmasak@gmail.com>
    Moritz Lenz <moritz@faui2k3.org>
    Tim Nelson <wayland@wayland.id.au>
    Carlin Bingham <carlin@theintersect.org>

=head1 Version

    Created: 12 Mar 2005

    Last Modified: 4 Feb 2014
    Version: 61

The document is a draft.

If you read the HTML version, it is generated from the Pod in the specs
repository under L<https://github.com/perl6/specs/blob/master/S29-functions.pod>
so edit it there in the git repository if you would like to make changes.

=head1 Notes

In Perl 6, all builtin functions belong to a named package (generally a
class or role). Not all
functions are guaranteed to be imported into the CORE scope.
In addition, the list of functions imported into C<CORE> will be
subject to change with each release of Perl. Authors wishing to
"Future Proof" their code should either specifically import the
functions they will be using, or always refer to the functions by their
full name.

After 6.0.0 comes out, global aliases will not be removed lightly,
and will never be removed at all without having gone through a
deprecation cycle of at least a year.  In any event, you can specify
that you want the interface for a particular version of Perl, and
that can be emulated by later versions of Perl to the extent that
security updates allow.

Where code is given here, it is intended to define semantics, not to
dictate implementation.

=head2 Operators vs. Functions

There is no particular difference between an operator and a function,
but for the sake of documentation, only functions declared without
specifying a grammatical category or with a category of C<term:>
(see L<S02#"Bits and Pieces">) will be described as "functions",
and everything else as "operators" which are outside of the scope
of this document.  (See S03 for operators.)

=head2 Multis vs. Functions

In actual fact, most of the "functions" defined here are multi
subs, or are multi methods that are also exported as multi subs.
The Setting is responsible for importing all the standard multi subs
from their various packages into the CORE lexical scope.  See S02.

=head1 Type Declarations

The following type declarations are assumed:

=begin item1 
AnyChar
The root class of all "character" types, regardless of level.

This is a subtype of C<Str>, limited to a length of 1 at its highest
supported Unicode level.

The type name C<Char> is aliased to the maximum supported Unicode level
in the current lexical scope (where "current" is taken to mean the
eventual lexical scope for generic code (roles and macros), not the
scope in which the generic code is defined).  In other words, use C<Char>
when you don't care which level you're writing for.

Subclasses (things that are C<isa AnyChar>):

=end item1
=begin item2 
CharLingua (language-defined characters)
=end item2
=begin item2 
Grapheme (language-independent graphemes)
=end item2
=begin item2 
Codepoint
=end item2
=begin item2 
Byte
Yes, Byte is both a string and a number.

=end item2
The short name for C<Grapheme> is typically C<Char> since that's the
default Unicode level.  A grapheme is defined as a base codepoint plus
any subsequent "combining" codepoints that apply to that base codepoint.
Graphemes are always assigned a unique integer id which, in the case of
a grapheme that has a precomposed codepoint, happens to be the same as
that codepoint.

There is no short name for C<CharLingua> because the type is meaningless
outside the scope of a particular language declaration.  In fact,
C<CharLingua> is itself an abstract type that cannot be instantiated.
Instead you have names like C<CharFrench>, C<CharJapanese>,
C<CharTurkish>, etc. for instantiated C<CharLingua> types.
(Plus the corresponding C<StrLingua> types, presumably.)

=begin item1 
Matcher
 subset Matcher of Mu where * !=== any(Bool,Match,Nil)

Used to supply a test to match against. Assume C<~~> will be used against it.
Booleans are forbidden because they almost always indicate a programming
error where the argument has been evaluated too soon against the wrong C<$_>.
For instance:

    grep $_ == 1, 1,2,3;        # evaluating wrong $_, so forbidden
    grep { $_ == 1 }, 1,2,3;    # okay
    grep * == 1, 1,2,3;         # okay

=end item1
=begin item1 
Ordering
 subset KeyExtractor of Code where { .signature === :(Any --> Any) };
 subset Comparator   of Code where { .signature === :(Any, Any --> Int ) };
 subset OrderingPair of Pair where { .left ~~ KeyExtractor && .right ~~ Comparator };

 subset Ordering where Signature | KeyExtractor | Comparator | OrderingPair | Whatever;

Used to handle comparisons between things.  Generally this
ends up in functions like C<sort()>,
C<min()>, C<max()>, etc., as a $by parameter which provides
the information on how two things compare relative to each other.

=end item1
=begin item2 
Comparator
A closure with arity of 2, which for ordering returns
negative/zero/positive, signaling the first argument should
be before/tied with/after the second. aka "The Perl 5 way".

For equivalence the closure returns either not 0 or 0 indicating
if the first argument is equivalent or not to the second.

=end item2
=begin item2 
KeyExtractor
A closure with arity of 1, which returns the "key" by which
to compare.  Values are compared using C<cmp> for orderings
and C<eqv> for equivalences, which in Perl 6 do different
comparisons depending on the types.  (To get a Perl 5 string
ordering you must compare with C<leg> instead.)

Internally the result of the KeyExtractor on a value should
be cached.

Note that it is very easy to generate a simple C<KeyExtractor>
using C<~*> for strings and C<+*> for numbers, since with most
simple operators C<*> returns a closure of one argument.

    @sorted = sort +*, @unsorted;  #ascending numeric
    @sorted = sort -*, @unsorted;  #descending numeric

=end item2
=begin item2 
OrderingPair
A combination of the two methods above, for when one wishes
to take advantage of the internal caching of keys that is
expected to happen, but wishes to compare them with something
other than C<eqv> or C<cmp>, such as C<E<lt>=E<gt>> or C<leg>.

=end item2
=begin item2 
Signature
If a signature is specified as a criterion, the signature is
bound to each value and then each parameter does comparisons
in positional order according to its type, as modified by
its traits.  Basically, the system will write the body of
the key extraction and comparison subroutine for you based on
the signature.

For ordering the list of positional parameter comparisons is
reduced as if using [||] but all comparisons do not need to be
performed if an early one determines an increasing or decreasing
order.  For equivalence the list is reduced as if using [&&].

=end item2
=begin item2 
Whatever
An ordering of C<*> does the default comparison for the operator:

    @sorted = sort *, @unsorted;

=end item2
=head1 Function Packages

=head2 Context

=begin item1 
caller
See L<S06#"The C<callframe> and C<caller> functions">.

=end item1
=begin item1 
callframe
See L<S06#"The C<callframe> and C<caller> functions">.

=end item1
=begin item1 
EVAL
 macro EVAL ( Str|Buf $code, Grammar :$lang = CALLER::<$?PARSER>)

Execute C<$code> as if it were code written in C<$lang>. If C<$code> 
is of type C<Buf>, the same decoding techniques are applied as a compiler
for C<$lang> would usually do to input files.

The default for C<$lang> is the language in effect at the exact
location of the C<EVAL> call.

Returns whatever C<$code> returns, or fails when the compilation fails.

Note that unlike in Perl 5's C<eval>, C<EVAL> does not catch any exceptions or control
exceptions.

=end item1
=begin item1 
evalfile
 multi evalfile (Str $filename ; Grammar :$lang = Perl6)

Behaves like, and replaces Perl 5 C<do EXPR>, with optional C<$lang>
support.

=end item1
=begin item1 
exit
 multi exit (Int $status = 0)

Stops all program execution, and returns C<$status> to the calling environment.

An exit runs all appropriate scope-leaving blocks such as C<LEAVE>, C<KEEP>,
and C<UNDO>, followed by all C<END> blocks, followed by all C<DESTROY>s that
do more than just reclaim memory, and so cannot be skipped because
they may have side effects visible outside the process.  If run from
an embedded interpreter, all memory must also be reclaimed.

[TBD: thread termination policy]

=end item1
=begin item1 
sleep
 multi sleep ( Real $for --> Nil )
 multi sleep ( Whatever --> Nil )

Attempt to sleep for up to C<$for> seconds, or forever when the argument is C<*>.
Implementations are obligated
to support sub-second resolutions if that is at all possible.  You may pass
any of C<Int>, C<Num>, C<Rat>, or C<Duration> types as an argument, since those
all do C<Real>, but regardless of which type you use, they are always scaled to
seconds.  (An implementation is allowed to provide access to a platform-specific
function based on, say, nanoseconds, but Perl 6 does not presume to know
how much resolution clocks will have in the future, so requires everything to
be specified in fractional seconds.)

This function returns nothing; use C<sleep-timer> if you wish it to
return how much time is remaining on the specified sleep.  However,
if you really just want to keep rolling over in bed until your alarm
goes off at a particular time, use C<sleep-till> instead, since it
is not subject to relative clock drift.

All of these sleep functions work only on the current thread.

=end item1
=begin item1 
sleep-timer
 multi sleep-timer ( Real $for --> Duration )

Just like C<sleep>, but returns the amount of time remaining to sleep
as a C<Duration> (which will be 0 if the call was not interrupted).
Depending on the platform and the system call involved, this may or
may not require emulation by interrogating the clock before and after.
For those systems whose system call returns the remaining time, this
can be more efficient than interrogating the clock twice yourself,
However, the optimizer is encouraged to change this to a bare C<sleep>
in sink context.  (But then, you might as well just write that in
the first place.)

=end item1
=begin item1 
sleep-till
 multi sleep-till ( Instant $till --> Bool )

Just like C<sleep>, but checks the current time and goes back to
sleep if accidentally woken up early, to guarantee waiting until the
specified time.  Returns True if the function actually waited, or if
the specified time happens to be the present moment.  Returns False
if you asked to sleep until a time in the past.

=end item1
=begin item1 
die
 multi die (@LIST)

Throws a fatal Exception. The default exception handler prints each element of
the list to $*ERR (STDERR).

=end item1
=begin item1 
fail
 multi fail (Str $message)

Can only be called inside a routine and causes the routine to C<return> an
unthrown exception; a C<Failure> object which stringifies to C<$message>.
If C<use fatal> is in effect where the routine was called from, it throws
the exception.

=end item1
=head2 Conversions

=begin item1 
bless
 method bless(*@protos, *%init_args )

Calling C<bless> on any invocant (but typically a type object) to create a new
object with the same class as the invocant.

(The C<.bless> function used to take a first argument indicating a candidate
to bless, but this was almost invariably specified as C<*>, meaning "whatever",
so now the object builder just implicitly asks the representation what its
preferred, er, representation is.  The C<*> form is now deprecated, and that
argument should be removed from any existing code.)

C<bless> automatically creates an object appropriate to the
representation of the class, then calls all appropriate C<BUILD>
routines for the current class, which initializes the object in
least-derived to most-derived order. See L<S12#Objects> for more
detailed information on object creation.

=end item1
=begin item1 
chrs
=end item1
=begin item1 
ords
=end item1
=begin item1 
chr
=end item1
=begin item1 
ord
 multi sub chrs( Int *@grid  --> Str )
 multi method ords( Str $string: --> List of Int ) is export
 multi method chr( Int $grid: --> Char ) is export
 multi method ord( Str $string: --> Int ) is export

C<chrs> takes zero or more integer grapheme ids and returns the
corresponding characters as a string.  If any grapheme id is used
that represents a higher abstraction level than the current
lexical scope supports, that grapheme is converted to the
corresponding lower-level string of codepoints/bytes that would
be appropriate to the current pragmatic context, just as any other Str
would be downgraded in context.

C<ords> goes the other direction; it takes a string value and returns
character values as integers.  The definition of character is pragma dependent.
Normally it's a grapheme id, but under codepoints or bytes scopes,
the string is coerced to the appropriate low-level view and interpreted
as codepoints or bytes.  Hence, under "use bytes" you will never see a
value larger than 256, and under "use codepoints" you will never see a
value larger than 0x10ffff.  The only guarantee under "use graphemes"
(the default) is that the number returned will correspond to the
codepoint of the precomposed codepoint representing the grapheme, if
there is such a codepoint.  Otherwise, the implementation is free to
return any unique id that larger than 0x10ffff.  (The C<chr> function
will know how to backtranslate such ids properly to codepoints or
bytes in any context.  Note that we are assuming that every codepoint's
context knows its normalization preferences, and every byte's context
also knows its encoding preferences. (These are knowable in the
lexical scope via the $?NF and $?ENC compile-time constants).)

The C<chr> and C<ord> variants are restricted to processing a single
character.  As is customary, you may pass a longer string to C<ord>,
but only the first character will be translated.

=end item1
=begin item1 
item
 multi item ( $item --> Item )

Forces generic Item context on its argument, and returns it.

=end item1
=begin item1 
list
 multi list ( Iterable $item --> List ) { $item.iterator.list }
 multi list ( List \iter --> List ) { iter }

Almost a no-op; just makes sure that $item can be iterated.

=end item1
=begin item1 
flat
 multi flat ( *@list --> List )

Forces flat context on its arguments, and returns them.
The heavy work is done by the C<*@> binding.

=end item1
=begin item1 
lol
 multi lol ( **@list --> List )

Forces the argument list to be evaluated in lol ("list of lists") context.
(Subscripts treat such a list of lists as a multidimensional slice.)
Any C<Parcel> within the top level of the outer list will be transformed into an item (Scalar).
The work is actually done by the binding to the C<**@> parameter.
See also the more general C<.tree> method, which defaults to itemizing every level.

=end item1
=begin item1 
hash
The C<hash> contextualizer

 multi hash ( *@list --> Hash )

Forces the argument list to be evaluated in hash context.
The expression is evaluated in list context (flattening any C<Capture>s),
then a hash will be created from the list, taken as a list of C<Pair>s.
(Any element in the list that is not a C<Pair> will pretend to be a key
and grab the next value in the list as its value.)  Equivalent to
C<%()> (except that empty C<%()> means C<%($/)>, while
empty C<hash()> means an empty hash).

=end item1
=begin item1 
gist
 multi gist( |item --> Str )
 multi method gist( Mu $item: --> Str )

Produces an informal string coercion, something a human might want
to see if debugging, for instance.  Each type may decide its own
gist representation.  C<Mu.gist> just calls C<.perl>, but any type's
C<gist> method may override this to remove metainfo that a human
would find to be cluttery or redundant, or to format a composite value
with suitable whitespace to tell the bits apart, or to trim down an
infinite list to something slightly shorter.

C<gist> is used as a last-ditch string coercion on each individual
argument of various human-facing output routines, specifically
C<say>, C<note>, C<warn>, and any non-exceptional arguments to C<die>.
The C<print> function is specifically excluded, since it's outputting
to a printer. C<:-)>

=end item1
=begin item1 
:16, :8, :2, :10
 multi prefix:<:16> ( Str $hexstr --> Num )
 multi prefix:<:8> ( Str $octstr --> Num )
 multi prefix:<:2> ( Str $binstr --> Num )
 multi prefix:<:10> ( Str $decstr --> Num )
 etc.

Interprets string as a number, with a default
hexadecimal/octal/binary/decimal radix. Any radix prefix (0b, 0d, 0x, 0o)
mentioned inside the string will override this operator (this statement is true:
10 == :8("0d10")), except 0b and 0d will be interpreted as hex digits by :16
(C<hex("0d10") == :16 "0d10">).  C<fail>s on failure.

These aren't really functions, syntactically, but adverbial forms that
just happen to allow a parenthesize argument.  But more typically you'll
see

    :4<222>
    :16<deadbeef>

and such.

Replaces Perl 5 C<hex> and C<oct>.

=end item1
=head2 OS

=begin item1 
gethost
 multi gethost( --> OS::Name )
 multi gethost( Str $name, OS::Addfamily :$type --> OS::Name )
 multi method gethost( OS::Addr $addr: --> OS::Name ) is export
 multi method gethost( URI $uri: --> OS::Name ) is export

The C<gethost> function operates on host naming or address information
and returns an C<OS::Name>. An C<OS::Name> is, minimally:

 class OS::Name {
   has Str $.name;
   has OS::Addr $.addr;
   has Array of Str @.aliases;
   has Array of OS::Addr @.addrs;
 }

Such names can apply to anything which has a name that maps
to an address, however, in this case the name is a hostname
and the address is some sort of network identifier (e.g.
an IPV4 address when resolving hosts that have IPV4 addresses).

When stringified, an C<OS::Name> yields its name. When
stringified, an C<OS::Addr> yields its address in an
appropriate text format (e.g. "10.1.2.3" for an IPV4 address).

The optional C<type> adverb can be passed when resolving a hostname,
and will filter the result to only those addresses that are of
the appropriate address family. This feature may be supported by
the underlying operating system, or Perl may emulate it.

Examples:

  say "Connection from {$socket.peer.gethost}";
  my $address = gethost("foo.example.com").addr;
  my $hostname = gethost(:addr<"10.1.2.3">);

=end item1
=begin item1 
chroot
 multi chroot ( Str $path = CALLER::<$_> --> Bool )

On POSIX systems, changes the process context of the current process such
that the "root" directory becomes C<$path> and all rooted paths
(those that begin with a leading path separator) are relative to
that path. For security reasons, many operating systems limit
this functionality to the superuser. The return value will be
true on success.

=end item1
=begin item1 
getlogin
 multi getlogin ( --> Str )

Returns the username of the account running the program. This may
not be as secure as using C<getpwuid> on some platforms.

=end item1
=begin item1 
kill
 multi kill ( OS::Signal $signal, Bool :$group, *@pids --> Bool )
 multi method kill ( Proc::PID $pid: OS::Signal $signal?, Bool :$group --> Bool )

Sends the given C<$signal> to the process(es) given and returns a boolean
value indicating success (true) if all of the processes existed and were
sent the signal and failure (false) if any of the processes did not exist
or the signal could not be delivered to them.

The C<$signal> can be initialized from an integer signal number or a
string. Common signals are:

 KILL - stop the process, do not allow it to exit gracefully
 TERM - stop the process, allow it to exit gracefully
 HUP  - Hangup, often used as a request to re-run from scratch
 STOP - Pause execution
 CONT - Continue after a STOP

Consult your operating system documentation for the full list
of signal names and numbers. For compatibility, a signal name
may be prefixed with "SIG".

The method form may omit the signal. In this case, the default signal is
C<'TERM'>.

If the C<:group> named parameter is passed, C<kill> will attempt to
send the signal to a process I<group> rather than a single process.
This functionality is platform-specific.

The special signal C<0> can be sent which does not actually deliver a
signal at all, and is used to determine if processes are still running:

  say "Still running" if $proc.kill(0);

=end item1
=begin item1 
run
=end item1
=begin item1 
shell
 multi shell ( $expression,   :$bg,  :%env = %*ENV --> Proc::Status )
 multi run   ( *$cmd, *@args, :$bg,  :%env = %*ENV --> Proc::Status )

C<shell> and C<run> execute an external program, and return control to
the caller once the program has exited.

C<shell> goes through the system shell (C<cmd> on windows, C</bin/sh>
on Unixish systems), thus interpreting all the usual shell meta characters.

C<run> treats the first argument as an executable name, and the rest of the
positional arguments as command line arguments that are passed to the
executable without any processing (except that it encodes Strings to buffers
first, as does C<shell>).

The return value of either function is the exit status
of the program, and can be evaluated in the following contexts:

 Bool - True = success; False = failure
 Int  - Exit status (per the .exit method)

Success is defined as returning an exit status of 0.  Any other exit
status returns False for failure.

See C<wait> for more detail on how the C<Proc::Status> object
is used.

On failure to execute, the routines C<fail()>.

If the C<:bg> named parameter is passed, the program will be executed
in the background, and the run command will return as soon as the
child process is created. This means that the object returned is
actually a C<Proc>, which represents the created process.

[ Note: should the :bg form take rw filehandles or is that over-overloading
        the functionality of run? Should run be the new open with
        respect to executing external code? -ajs ]

[ Conjecture: maybe shell() and run() should support a C<:$cwd = $*CWD>
parameter -moritz ]

=end item1
=begin item1 
runinstead
 multi runinstead ( ; Str $path, *@args )
 multi runinstead ( ; Str $command )

Identical to C<run> except that it never returns. The executed program
replaces the currently running program in memory.

=end item1
=begin item1 
syscall
=end item1
=head2 Concurrency

There are higher-level models of concurrency management in Perl (see
L<S17#Concurrency>). These functions are simply the lowest level
tools

=begin item1 
fork
 sub Processes::fork( --> Proc )

Creates a copy of the current process. Both processes return from
C<fork>. The original process returns
the I<child> process as a C<Proc> object. The newly created process
returns the I<parent> process as a C<Proc> object. As with
any Proc object, the child process object numifies to the
process ID (OS dependent integer). However, the parent process object
numifies to C<0> so that the child and parent can distinguish each other.

Typical usage would be:

 if !defined(my $pid = fork) {
   die "Error calling fork: $!";
 } elsif $pid == 0 {
   say "I am the new child!";
   exit 0;
 } else {
   say "I am the parent of {+$pid}";
   wait();
 }

=end item1
=begin item1 
wait
 multi method wait( Proc $process: *%options --> Proc::Status )

 multi wait ( Proc $process = -1, *%options --> Proc::Status )

Waits for a child process to terminate and returns the status
object for the child.  This status object will numify to the process
ID of the child that exited.

Important Proc::Status methods:

 .exit - Numeric exit value
 .pid - Process ID
 .signal - Signal number if any, otherwise 0

For historical reasons there is a C<.status> method which is equal to:

 ($status.exit +< 8) +| $status.signal

If C<$process> is supplied, then wait will only return when the given process
has exited. Either a full C<Proc> object can be passed, or just a
numeric process ID. A C<-1> explicitly indicates that wait should return
immediately if any child process exits.

When called in this way, the returned C<Proc::Status> object
will have a C<.pid> of C<-1> (which is also what it numifies to) if
there was no such process to wait for.

The named options include:

=end item1
=begin item2 
blocking
Defaults to true. If set to false, this forces wait to return immediately.

=end item2
=begin item2 
WNOHANG
Exists for historical compatibility. C<WNOHANG => 1> is identical to
C<blocking => False>.

=end item2
=head2 Pending Apocalypse

The following functions are classified by Apocalypse/Synopsis numbers.

=begin item1 
A/S??: OS Interaction
chroot crypt getlogin /[get|set][pw|gr].*/ kill setpgrp setpriority
times

... These are probably going to be part of POSIX, automatically imported to GLOBAL B<if> the platform is the right one

=end item1
=head2 Default Functions

These functions are exported into the default namespace

=begin item1 
all -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
any -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
cat -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
classify -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
defined -- see S32-setting-library/Basics.pod
=end item1
=begin item1 
grep -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
first -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
keys -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
kv -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
join -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
map -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
max -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
min -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
none -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
one -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
pairs -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
print -- see S32-setting-library/IO.pod
=end item1
=begin item1 
printf -- see S32-setting-library/IO.pod
=end item1
=begin item1 
roundrobin -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
pick -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
reduce -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
reverse -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
say -- see S32-setting-library/IO.pod
=end item1
=begin item1 
shape -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
sort -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
srand -- see S32-setting-library/Numeric.pod
=end item1
=begin item1 
undefine -- see S32-setting-library/Basics.pod
=end item1
=begin item1 
uri -- see S32-setting-library/IO.pod
=end item1
=begin item1 
values -- see S32-setting-library/Containers.pod
=end item1
=begin item1 
warn -- see S32-setting-library/Any.pod
=end item1
=begin item1 
zip -- see S32-setting-library/Containers.pod
=end item1
=head2 Non-default Functions

These functions which existed in perl5 still exist, but are not part of the default
namespace any more.

=head3 Container

The following functions can now be found in or replaced by something in the Container
modules.

delete, exists, pop, push, shift, splice, unshift

=head3 Numeric

See L<S32#Numeric>.

=head3 IO

The following functions can now be found in or replaced by something in the IO
modules.

accept, bind, binmode, chdir, chmod, chown, close, closedir, connect
eof, fcntl, fileno, flock, getc, getsockname, getsockopt, glob, ioctl, link, listen
lstat, mkdir, open, opendir, pipe, print, printf, read, readdir, readline, readlink
readpipe, recv, rename, rewinddir, rmdir, say, seek, seekdir, select, send, setsockopt
shutdown, socket, socketpair, stat, symlink, sysopen, sysread, sysseek
syswrite, tell, telldir, truncate, umask, unlink

=head3 Temporal

The following functions can now be found in or replaced by something in the Temporal
modules.

gmtime, localtime, time

=head3 String

The following functions can now be found in or replaced by something in the String
module.

chop, chomp, index, lc,  pack, quotemeta, rindex, split, sprintf, substr, uc,
ucfirst, unpack

=head2 Obsolete Functions

Some of these are obsoleted only as general functions, and are still available by using
the right packages.  Others are obsoleted in that they're keywords, rather than functions
(these are in their own section, below).

=begin item1 
%
 $num1 % $num2

Does a floating point modulo operation, i.e. 5.5 % 1 == 0.5 and 5 % 2.5 == 0.

=end item1
=begin item1 
dbmopen, dbmclose
 use DB_File;

=end item1
=begin item1 
dump
Dumped.  Restoring from core dumps is in any event not very useful on modern
virtual-memory operating systems.  Startup acceleration should be accomplished
using a precompiler of some kind (details will be very implementation specific),
or a pre-forking daemon such as Perl 5's App::Persistent (which will be an
external module when it is ported).

=end item1
=begin item1 
each
See .pairs() method, above.

=end item1
=begin item1 
endpwent, endgrent, endservent, endprotoent, endnetent, endhostent
The NameServices role in S16 covers most of these.

=end item1
=begin item1 
format, formline
See Exegesis 7.

=end item1
=begin item1 
getgrgid, getgrnam, getpwnam, getpwuid
The User and Group roles in S16 cover most of these.

=end item1
=begin item1 
getpwent, getgrent, getservent, getnetent, gethostent
The NameServices role in S16 covers most of these.

=end item1
=begin item1 
length()
This word is banned in Perl 6.  You must specify units.  In practice, this probably means
you want Str.chars(), although it could be Str.bytes(), or even something else.  See
S32-setting-library/String for details.

=end item1
=begin item1 
lcfirst
Retired due to lack of use case

=end item1
=begin item1 
msgctl, msgget, msgrcv, msgsnd
See IPC::SysV

=end item1
=begin item1 
local
Replaced by C<temp> which, unlike C<local>, defaults to not changing the value.

=end item1
=begin item1 
lock
See L<S17#Concurrency>. C<lock> has been replaced by
C<is atomic>.

=end item1
=begin item1 
pos
There is no C<pos> function in Perl 6 because that would not allow a string
to be shared among threads.  Generally you want to use C<$/.to> for that now,
or keep your own position variable as a lexical.

=end item1
=begin item1 
prototype
 &func.meta.signature;
 &func.^signature;

=end item1
=begin item1 
ref
There is no ref() any more, since it was almost always used to get
the type name in Perl 5.  If you really want the type name, you can
use C<$var.WHAT.perl>.  If you really want P5 ref
semantics, use C<Perl5::p5ref>.

But if you're just wanting to test against a type, you're likely better off
performing an C<isa> or C<does> or C<can>, or just C<$var ~~ TYPE>.

=end item1
=begin item1 
reset
Was there a I<good> use for this?

=end item1
=begin item1 
semctl, semget, semop
See IPC::SysV;

=end item1
=begin item1 
setpwent, setgrent, setservent, setprotoent, setnetent, sethostent
The NameServices role in S16 covers most of these.

=end item1
=begin item1 
shmctl, shmget, shmread, shmwrite
See IPC::SysV;

=end item1
=begin item1 
study
Algorithm was too Anglo-centric.  Could be brought back if generalized somehow.

=end item1
=begin item1 
tie, tied
These are replaced by container types.  The compiler is free to assume
that any lexical variable is never going to change its container type
unless some representation is made to that effect in the declaration.
Note: P5's tied() is roughly replaced by P6's variable().

XXX Examples?

my $foo is ....? is tie
the meta operation on the container type for 'rebless' -
macro tie ( $var, $class, *@args ) { CODE { variable($var).meta.rebless( $class, *@args ) } } )

endXXX

=end item1
=begin item1 
untie
See notes on "tie", above, but basically these are replaced with container classes.

=end item1
=begin item1 
vec
Should replace C<vec> with declared buffer/array of C<bit>, C<uint2>,
C<uint4>, etc.

=end item1
=begin item1 
waitpid
C<wait> can now be called with or without an optional process/pid.

=end item1
=begin item1 
write
See Exegesis 7.

=end item1
=head3 Keywords

The following were listed in Perl 5's perlfunc, but should now be considered keywords
rather than functions.

last, my, next, no, our, package, return, sub, use

=head1 Default Export Questions

Not sure whether these are exported by default or not.  Also, many may no longer exist; if
so, they should be entered in the "Obsolete" section.

=begin item1 
Signal-related
alarm
kill

=end item1
=begin item1 
OS or library related
 chroot
 crypt
 getlogin
 getpeername -- should this go on Pipe?

OS objects:

 --Process
 getpgrp
 getppid
 getpriority
 setpgrp
 setpriority

 --Service
 getservbyname
 getservbyport

 --Protocol
 getprotobyname
 getprotobynumber

 --Network
 getnetbyaddr
 getnetbyname

 --Host
 gethostbyaddr
 gethostbyname

=end item1
=begin item1 
Flow control
succeed
proceed
redo

=end item1
=begin item1 
Other
caller
chr
die
do
EVAL
exec
exit
fork
goto
hex
import
int
oct
ord
require
scalar
sleep
state
syscall
system
times
utime
wait

=end item1
=head1 Additions

Please post errors and feedback to perl6-language.  If you are making
a general laundry list, please separate messages by topic.

=comment vim:set expandtab sw=4:
=end pod